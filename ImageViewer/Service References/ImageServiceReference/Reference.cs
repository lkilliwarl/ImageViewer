//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImageViewer.ImageServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Image", Namespace="http://schemas.datacontract.org/2004/07/ImageService")]
    [System.SerializableAttribute()]
    public partial class Image : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {

        public override string ToString()
        {
            return TagString.ToString();
        }
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Tag_IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagString {
            get {
                return this.TagStringField;
            }
            set {
                if ((object.ReferenceEquals(this.TagStringField, value) != true)) {
                    this.TagStringField = value;
                    this.RaisePropertyChanged("TagString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tag_Id {
            get {
                return this.Tag_IdField;
            }
            set {
                if ((this.Tag_IdField.Equals(value) != true)) {
                    this.Tag_IdField = value;
                    this.RaisePropertyChanged("Tag_Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ImageServiceReference.IImageService")]
    public interface IImageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/AddImage", ReplyAction="http://tempuri.org/IImageService/AddImageResponse")]
        void AddImage(string tagString, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/AddImage", ReplyAction="http://tempuri.org/IImageService/AddImageResponse")]
        System.Threading.Tasks.Task AddImageAsync(string tagString, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/EditTag", ReplyAction="http://tempuri.org/IImageService/EditTagResponse")]
        void EditTag(int id, string editedTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/EditTag", ReplyAction="http://tempuri.org/IImageService/EditTagResponse")]
        System.Threading.Tasks.Task EditTagAsync(int id, string editedTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/DeleteImage", ReplyAction="http://tempuri.org/IImageService/DeleteImageResponse")]
        void DeleteImage(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/DeleteImage", ReplyAction="http://tempuri.org/IImageService/DeleteImageResponse")]
        System.Threading.Tasks.Task DeleteImageAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/GetImage", ReplyAction="http://tempuri.org/IImageService/GetImageResponse")]
        ImageViewer.ImageServiceReference.Image GetImage(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/GetImage", ReplyAction="http://tempuri.org/IImageService/GetImageResponse")]
        System.Threading.Tasks.Task<ImageViewer.ImageServiceReference.Image> GetImageAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/GetImages", ReplyAction="http://tempuri.org/IImageService/GetImagesResponse")]
        System.Collections.ObjectModel.ObservableCollection<ImageViewer.ImageServiceReference.Image> GetImages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/GetImages", ReplyAction="http://tempuri.org/IImageService/GetImagesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ImageViewer.ImageServiceReference.Image>> GetImagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/FilterImages", ReplyAction="http://tempuri.org/IImageService/FilterImagesResponse")]
        System.Collections.ObjectModel.ObservableCollection<ImageViewer.ImageServiceReference.Image> FilterImages(string tagToFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageService/FilterImages", ReplyAction="http://tempuri.org/IImageService/FilterImagesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ImageViewer.ImageServiceReference.Image>> FilterImagesAsync(string tagToFilter);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImageServiceChannel : ImageViewer.ImageServiceReference.IImageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImageServiceClient : System.ServiceModel.ClientBase<ImageViewer.ImageServiceReference.IImageService>, ImageViewer.ImageServiceReference.IImageService {
        
        public ImageServiceClient() {
        }
        
        public ImageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddImage(string tagString, byte[] data) {
            base.Channel.AddImage(tagString, data);
        }
        
        public System.Threading.Tasks.Task AddImageAsync(string tagString, byte[] data) {
            return base.Channel.AddImageAsync(tagString, data);
        }
        
        public void EditTag(int id, string editedTag) {
            base.Channel.EditTag(id, editedTag);
        }
        
        public System.Threading.Tasks.Task EditTagAsync(int id, string editedTag) {
            return base.Channel.EditTagAsync(id, editedTag);
        }
        
        public void DeleteImage(int id) {
            base.Channel.DeleteImage(id);
        }
        
        public System.Threading.Tasks.Task DeleteImageAsync(int id) {
            return base.Channel.DeleteImageAsync(id);
        }
        
        public ImageViewer.ImageServiceReference.Image GetImage(int id) {
            return base.Channel.GetImage(id);
        }
        
        public System.Threading.Tasks.Task<ImageViewer.ImageServiceReference.Image> GetImageAsync(int id) {
            return base.Channel.GetImageAsync(id);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ImageViewer.ImageServiceReference.Image> GetImages() {
            return base.Channel.GetImages();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ImageViewer.ImageServiceReference.Image>> GetImagesAsync() {
            return base.Channel.GetImagesAsync();
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ImageViewer.ImageServiceReference.Image> FilterImages(string tagToFilter) {
            return base.Channel.FilterImages(tagToFilter);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ImageViewer.ImageServiceReference.Image>> FilterImagesAsync(string tagToFilter) {
            return base.Channel.FilterImagesAsync(tagToFilter);
        }
    }
}
